Service:
  RegionId: cn-hangzhou
  DeployType: ros
  DeployMetadata:
    ServiceInstanceNameRule:
      Prefix: cloudreve
    SupplierDeployMetadata:
      ArtifactRelation:
        'centos_7_9_x64_20G_alibase_20240403.vhd':
          ArtifactId: ${Artifact.EcsImage.ArtifactId}
          ArtifactVersion: ${Artifact.EcsImage.ArtifactVersion}
    TemplateConfigs:
      - Name: 单机版
        Url: 'ros_templates/template.yaml'
        AllowedRegions:
          - cn-qingdao
          - cn-beijing
          - cn-zhangjiakou
          - cn-huhehaote
          - cn-wulanchabu
          - cn-hangzhou
          - cn-shanghai
          - cn-shenzhen
          - cn-chengdu
          - cn-heyuan
          - cn-guangzhou
          - cn-hongkong
          - ap-northeast-1
          - ap-southeast-1
          - ap-southeast-3
          - ap-southeast-5
          - ap-southeast-6
          - us-east-1
          - us-west-1
          - eu-west-1
          - eu-central-1
          - me-east-1
          - me-central-1
          - cn-nanjing
          - cn-fuzhou
          - ap-southeast-7
          - ap-northeast-2
          - cn-wuhan-lr
  ServiceType: private
  ServiceInfo:
    Locale: zh-CN
    ShortDescription: cloudreve deploy
    Image: 'resources/icons/service_logo.png'
Artifact:
  EcsImage:
    ArtifactType: EcsImage
    ArtifactName: cloudreve
    Description: cloudreve
    ArtifactProperty:
      RegionId: ${ImageBuilder.EcsImage.RegionId}
      ImageId: ${ImageBuilder.EcsImage.SourceImageId}
    SupportRegionIds:
      - cn-qingdao
      - cn-beijing
      - cn-zhangjiakou
      - cn-huhehaote
      - cn-wulanchabu
      - cn-hangzhou
      - cn-shanghai
      - cn-shenzhen
      - cn-chengdu
      - cn-heyuan
      - cn-guangzhou
      - cn-hongkong
      - ap-northeast-1
      - ap-southeast-1
      - ap-southeast-3
      - ap-southeast-5
      - ap-southeast-6
      - us-east-1
      - us-west-1
      - eu-west-1
      - eu-central-1
      - me-east-1
      - me-central-1
      - cn-nanjing
      - cn-fuzhou
      - ap-southeast-7
      - ap-northeast-2
      - cn-wuhan-lr
ImageBuilder:
  EcsImage:
    RegionId: cn-hangzhou
    SourceImageId: m-bp125wji42l3ca0evma8
    SystemDiskSize: 20
    InstanceType: ecs.c6.large
    InternetMaxBandwidthOut: 10
    CommandType: RunShellScript
    Timeout: 10800
    Tags: [ ]
    CommandContent: |-
        #!/bin/bash

        # 关闭基础镜像非必要服务，降低基础服务资源占用
        systemctl stop systemd-resolved.service
        systemctl disable systemd-resolved.service
        systemctl stop rpcbind.socket
        systemctl stop rpcbind.service
        systemctl disable rpcbind.service
        systemctl disable rpcbind.socket
        systemd-analyze blame

        # 关闭防火墙
        systemctl disable firewalld
        systemctl stop firewalld

        # 关闭update-motd 服务
        systemctl disable update-motd.service
        systemctl stop update-motd.service

        systemctl stop systemd-resolved.service
        systemctl disable systemd-resolved.service
        systemctl stop rpcbind.socket
        systemctl stop rpcbind.service
        systemctl disable rpcbind.service
        systemctl disable rpcbind.socket

        # 升级基础组件：
        dnf upgrade-minimal
        # 安装基础组件
        yum install -y nmap-ncat

        # 安装mariadb数据库
        yum -y install mariadb-server nmap-ncat expect

        # 修改配置文件c, 仅仅监听localhost，防止外部攻击
        sudo sed -i 's/^#bind-address=0\.0\.0\.0/bind-address=127.0.0.1/' /etc/my.cnf.d/mariadb-server.cnf

        # 启动数据库服务，同时设置开机启动
        systemctl start mariadb
        # systemctl status mariadb
        systemctl enable mariadb

        cat > /root/init_db.sh << EOF
        #!/usr/bin/expect -f

        # 启动 mysql_secure_installation
        spawn mysql_secure_installation

        # 设置 root 密码（如果需要）
        expect "Enter current password for root (enter for none):"
        send "\r"
        expect "Switch to unix_socket authentication \\[Y/n\\]"
        send "n\r"

        # 设置新 root 密码
        expect "Change the root password? \\[Y/n\\]"
        send "n\r"

        # 移除匿名用户
        expect "Remove anonymous users? \\[Y/n\\]"
        send "Y\r"

        # 禁止 root 远程登录
        expect "Disallow root login remotely? \\[Y/n\\]"
        send "Y\r"

        # 删除 test 数据库
        expect "Remove test database and access to it? \\[Y/n\\]"
        send "Y\r"

        # 重新加载权限表
        expect "Reload privilege tables now? \\[Y/n\\]"
        send "Y\r"

        expect eof
        EOF

        # 您可以设置 MariaDB 的密码、移除匿名用户、禁止 root 远程登录、删除测试数据库等
        chmod +x /root/init_db.sh
        expect /root/init_db.sh
        rm -rf /root/init_db.sh

        # 安装redis
        yum install -y redis.x86_64
        sudo sed -i 's/^bind 127\.0\.0\.1 -::1/bind 127.0.0.1/' /etc/redis.conf
        # 设置redis开启启动
        systemctl enable redis.service
        systemctl start redis.service

        # 登录
        redis-cli -h 127.0.0.1 -p 6379 &

        cd /root/
        wget https://aliyun-oss-testzh.oss-cn-beijing.aliyuncs.com/swas-applicaions/cloudreve/applications.tar.gz
        tar -xvf applications.tar.gz -C /
        mv /usr/local/applications/aria2/aria2.service /usr/lib/systemd/system/
        mv /usr/local/applications/cloudreve/cloudreve-master.service /usr/lib/systemd/system/
        systemctl daemon-reload

        # 仅仅将aria2服务设置为开机启动，cloudreve-master服务，不需要设置开机启动
        # 由开机初始化服务，负责启动cloudreve-master
        # Tips：切记不要将cloudreve-master设置为开机启动，同时不要启动cloudreve-master.service
        systemctl enable aria2.service

        rm -rf /root/applications.tar.gz


        cat > /usr/lib/systemd/system/app-init.service << SERVICE_EOF
        [Unit]
        Description=Application init serivce
        Wants=cloud-final.service
        Requires=network-online.target
        After=network-online.target cloud-final.service

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/app-init.sh
        RemainAfterExit=false
        KillMode=control-group
        Restart=no
        StandardOutput=file:/var/log/app-init.log
        StandardError=file:/var/log/app-init.log

        [Install]
        WantedBy=multi-user.target
        SERVICE_EOF


        cat > /usr/local/bin/app-init.sh << INIT_EOF
        #!/bin/bash

        # 初始化应用......
        echo "$(date +"%Y-%m-%d %H:%M:%S") init applications......"

        if sh /usr/local/bin/startup.sh; then
          echo "$(date +"%Y-%m-%d %H:%M:%S") init applications successfully"
        else
          echo "$(date +"%Y-%m-%d %H:%M:%S") init applications failed"
        fi

        rm -rf /usr/local/bin/startup.sh
        rm -- "$0"
        systemctl disable app-init.service
        rm -rf /etc/systemd/system/app-init.service /usr/lib/systemd/system/app-init.service
        systemctl daemon-reload
        INIT_EOF

        cat > /usr/local/bin/startup.sh << 'STARTUP_EOF'
        #!/bin/bash

        set -e

        # 认证文件位置: /root/applications.auth
        AUTH_FILE="/root/applications.auth"

        ########## 可编辑区域 start ##########

        DB_ROOT_PASSWORD=$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 12)
        DB_CLOUDREVE_USERNAME="cloudreve"
        DB_CLOUDREVE_PASSWORD=$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 12)
        CLOUDREVE_DATABASE_NAME="cloudreve"

        CLOUDREVE_ADMIN_USERNAME="admin@cloudreve.org"
        CLOUDREVE_ADMIN_PASSWORD="" # TODO: 从cloudreve日志中获取

        # usage: check_tcp_service_ready is_ready_result 127.0.0.1 3306
        check_tcp_service_ready() {
          local check_result=$1
          local host=$2
          local tcp_port=$3

          local retry_interval=2
          local max_attempts=10
          local attempt=1

          echo "Checking if the service on $host:$tcp_port is ready..."

          while [ $attempt -le $max_attempts ]; do
            if nc -z $host $tcp_port; then
              echo "Service is ready on $host:$tcp_port"
              eval $check_result="yes"
              return
            else
              echo "Service is not ready yet. Attempt $attempt/$max_attempts..."
              attempt=$((attempt + 1))
              sleep $retry_interval
            fi
          done

          echo "Service is not ready after $max_attempts attempts."

          eval $check_result="no"
        }

        # 检查mariadb数据库服务是否Ready
        DB_SERVICE_NAME="mariadb.service"
        is_mariadb_svc_ready="no"

        echo "$(date +"%Y-%m-%d %H:%M:%S") check ${DB_SERVICE_NAME} ready or not"

        check_tcp_service_ready is_mariadb_svc_ready 127.0.0.1 3306
        if [ ${is_mariadb_svc_ready} = "yes" ]; then
          echo "$(date +"%Y-%m-%d %H:%M:%S") ${DB_SERVICE_NAME} is ready"
        else
          echo "$(date +"%Y-%m-%d %H:%M:%S") ${DB_SERVICE_NAME} not ready"
          exit 1
        fi

        # 初始化数据库
        echo "$(date +"%Y-%m-%d %H:%M:%S") init database, create user and database"

        mysql -uroot -pnone -e "create database ${CLOUDREVE_DATABASE_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"
        mysql -uroot -pnone -e "create user '${DB_CLOUDREVE_USERNAME}'@'localhost' IDENTIFIED BY '${DB_CLOUDREVE_PASSWORD}';"
        mysql -uroot -pnone -e "GRANT ALL PRIVILEGES ON ${CLOUDREVE_DATABASE_NAME}.* TO '${DB_CLOUDREVE_USERNAME}'@'localhost';"
        mysql -uroot -pnone -e "FLUSH PRIVILEGES;"
        mysql -uroot -pnone -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${DB_ROOT_PASSWORD}';"

        # 配置和启动cloudreve-master.service服务
        echo "$(date +"%Y-%m-%d %H:%M:%S") init and start cloudreve service"
        cat > /usr/local/applications/cloudreve/master.ini << EOF
        [System]
        Mode = master
        Listen = :80
        Debug = false
        ProxyHeader = "X-Forwarded-For"
        AuthFile = ${AUTH_FILE}

        [Database]
        Type = mysql
        Port = 3306
        User = ${DB_CLOUDREVE_USERNAME}
        Password = ${DB_CLOUDREVE_PASSWORD}
        Host = 127.0.0.1
        Name = ${CLOUDREVE_DATABASE_NAME}
        TablePrefix = ""
        Charset = utf8

        [Redis]
        Network = "tcp"
        Server = "127.0.0.1:6379"
        User = ""
        Password = ""
        DB = "0"

        [MasterNode]
        Aria2Enabled = true
        Aria2Server = "http://127.0.0.1:6800/"
        Aria2Token = "cloudreve"
        TempPath = "/usr/local/applications/cloudreve/temp_data"
        Interval = 10
        Timeout = 10
        EOF

        systemctl enable --now cloudreve-master.service
        sleep 5s

        # 最后, 将应用的用户名和密码写入文件
        #echo "cloudreve_admin_username: ${CLOUDREVE_ADMIN_USERNAME}" > ${AUTH_FILE}
        #echo "cloudreve_admin_password: ${CLOUDREVE_ADMIN_PASSWORD}" >> ${AUTH_FILE}
        echo "mariadb_root_password: ${DB_ROOT_PASSWORD}" >> ${AUTH_FILE}
        echo "mariadb_${DB_CLOUDREVE_USERNAME}_password: ${DB_CLOUDREVE_PASSWORD}" >> ${AUTH_FILE}
        STARTUP_EOF

        chmod 0755 /usr/local/bin/app-init.sh  /usr/local/bin/startup.sh
        systemctl enable app-init.service

        ARGUS_VERSION=3.5.7 /bin/bash -c "$(curl -sS https://cms-agent-ap-southeast-1.oss-ap-southeast-1-internal.aliyuncs.com/Argus/agent_install_ecs-1.7.sh)" 2>&1

        ###################################################
        #  1. 清理制作镜像过程中产生的日志，避免敏感信息泄漏。    #
        #    - 系统日志                                    #
        #    - 应用日志                                    #
        #  2. 清理制作镜像过程中命令行历史                    #
        #  3. 删除所有账户默认密码，删除所有用户目录下的ssh配置  #
        #  4. 清理缓存                                     #
        ###################################################

        set -xe

        function clean_log(){
            rm -fv /usr/local/aegis/aegis_update/data/data.[0-9]
            rm -fv /usr/local/aegis/aegis_client/aegis_*/data/data.[0-9]

            rm -fv /usr/local/aegis/globalcfg/domaincfg.ini
            rm -fv /opt/aegis/globalcfg/domaincfg.ini

            rm -rf /var/log/anaconda/*
            rm -rf /var/log/ecsgo.log*
            rm -rf /var/log/cron-*
            rm -rf /var/log/btmp-*
            rm -rf /var/log/maillog-*
            rm -rf /var/log/messages-*
            rm -rf /var/log/secure-*
            rm -rf /var/log/spooler-*
            rm -rf /var/log/yum.log-*
            rm -rf /var/log/boot.log-*
            rm -rf /var/log/anaconda/*
            rm -rf /var/log/sa/*
            rm -rf /var/log/conman*
            rm -rf /var/log/journal/*
            rm -rf /var/log/cloud-init.log
            rm -rf /var/log/cloud-init-output.log

            for i in $(find /var/log/ -type f); do > $i; done

            rm -rfv /var/lib/apt/lists/*
            rm -rfv /var/lib/yum/history/*
            rm -rfv /var/lib/dnf/history*
            rm -rfv /var/lib/dhclient/*
            rm -rfv /var/lib/dhcp/*
            rm -rfv /var/lib/aliyun_init/*
            rm -rfv /var/lib/cloud/*

            if [ -d /usr/local/share/aliyun-assist/*/log/ ];then
                rm -rfv  /usr/local/share/aliyun-assist/*/log/*
            fi

            rm -rfv /etc/ssh/sshd_config.d/*

            rm -rf /tmp/*
            rm -f /root/{.bash_history,.viminfo,*.cfg,*.log*}
            rm -rf /root/script

            sed -i "/iZ*Z/d" /etc/hosts
            sed -i "/AliYun/d" /etc/hosts
            sed -i "/Aliyun/d" /etc/hosts
            sed -i "/debug/d" /etc/hosts

            # Clean up useless nameservers to prevent cloudinit local domain name resolution timeout
            sed -i "/nameserver/d" $(realpath /etc/resolv.conf)

            [ -d /etc/NetworkManager/system-connections ] && rm -fv /etc/NetworkManager/system-connections/*.nmconnection

            if [[ ! -L /etc/udev/rules.d/70-persistent-net.rules ]];then
                rm -rfv /etc/udev/rules.d/70-persistent-net.rules
            fi

            sync
            sync
            sync
        }

        function clean_source_cache(){
            if [ `which zypper` ]; then
                zypper clean; rm -fv /etc/zypp/repos.d/CUSTOM*
            elif [ `which apt-get` ]; then
                apt-get -q clean; apt-get -q autoclean; apt-get -q -y autoremove;
            elif [ `which yum` ]; then
                yum clean all;
            elif [ `which dnf` ]; then
                dnf clean all;
            elif [ `which pkg` ]; then
                pkg autoremove
            fi
        }

        function reset_sshd_cfg() {
            sed -i '/PasswordAuthentication/d' /etc/ssh/sshd_config
            echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config
            rm -f /etc/ssh/ssh_host_*
        }

        function clean_user_auth(){
            passwd -l root
            sed -i -e 's/root:[^:]*:/root:*:/g' /etc/shadow
            rm -f /root/.ssh/*
        }

        function clean_cmd_history(){
            for user in $(cut -f1 -d: /etc/passwd); do
                if [ -f /home/$user/.bash_history ]; then
                    > /home/$user/.bash_history
                fi
            done
            > /root/.bash_history
        }

        clean_source_cache
        clean_log
        reset_sshd_cfg
        clean_user_auth
        clean_cmd_history
        rm -- "$0"